[[chapid_13]]
== Mobile Web
Mobile web refers to web access through any mobile phones or handheld devices such as tablets. 
Mobile web access can be broadly classified into two types - the classical browser based web access and secondly, accessing the web indirectly through a native application. 
Native apps often enjoy superior access to most of the device’s hardware whereas browser based apps only get access to a subset of features. Native apps also enjoy somewhat improved performance in terms of speed and graphics rendering. However, with advances in technology, the line between the two is getting blurred day by day. We will touch upon this in detail in next section [adTodo: insert link here] “Native Apps vs. Web Apps” 

Mobile web has existed for many years. In its early days, mobile web was based upon WAP (Wireless access protocol)/WML (Wireless markup language) protocols. These allowed older phones to display web content in a simple textual manner with hypertext markup and navigation links. [adTodo : Insert screen shots for WAP display such as this: http://www.freewebmasterhelp.com/static/tutorials/wml/gnet.gif]
WML is a variant of HTML that was designed for rendering HTML like controls on a mobile phone. It is based on XML and anyone with the knowledge of HTML can thus easily create WML sites.

With the advent of smart phones and powerful hardware, modern day devices can display full HTML and XHTML sites. Many of them support HTML5 features as well, making it easy to adapt existing sites to mobile layouts.

=== Developing for mobile web
Mobile web offers a powerful medium to deliver your content to a greater number of users. 
It allows users to access your content anywhere anytime without needing a full blown desktop or laptop computer.  
For years, managers and developers have wondered whether it is time worthy and cost effective to create and maintain different versions of their web sites, one for the desktop and one for the mobile. That dilemma is no longer applicable as with the increasing number of smart phones being sold and subsequent explosion in market penetration of mobile web users, it becomes increasingly important that you consider developing for the mobile devices. 

However, the bad news is - not all mobile devices are created equal. We all know how much difficult it is to develop for different browsers - IE, Firefox, Chrome, Opera, Safari, imagine developing for different mobile devices - iPhone/iPad, Blackberry, Android, Nokia, Palm, Motorola and so on. Adding insult to injury, each device comes with different hardware capabilities, different resolution, different browsers, different feature support, some with touch capabilities and the list goes on. If creating content that rendered the same on 4-5 browsers was tough, you now have potentially endless number of browsers to worry about. Adapting your web site to deliver a good consistent experience becomes a non trivial task. 

Throughout this chapter, we'll focus on the ways and techniques by which we can deliver a rich and consistent experience to the end user, and degrading gracefully in cases where we cannot. The ultimate goal is present a uniform design and experience between the full blown website and its mobile counterpart, degrading gracefully where applicable and ultimately, presenting a functional (although at different levels) website that attracts users and allows them to explore your content in a friendly manner.

==== Native apps vs web apps
The first question that pops into mind while developing for mobile web is whether to create a native application or create a browser based application. There is no universal answer to this. Native apps bring full access to the device’s hardware such as camera, GPS, accelerometer and so on. Since they run directly on the native hardware, they can perform at greater speeds. On the other hand, developing a true web application can bring down deployment and maintenance costs significantly. It also provides a ubiquitous platform for your application as you maintain a single code base, reuse your existing components to greater degree and relatively smaller changes, adapt the desktop web application to serve mobile devices as well. Sometimes, a native app can serve as a host to the web application. Such applications are called hybrid applications and can achieve the best of both worlds in some cases. For the remainder of this chapter, we will use the term "Mobile web" to represent browser based web application.

==== Development platforms, tools, frameworks [TODO: needs a better title]
_``The problem is choice. ~Matrix''_ 

Choosing is the right set of language and frameworks is quintessential. Older phones support only WML while the newer generation devices can even support HTML and XHTML. W3C also provides for mobile profiles know as XHTML Mobile Profile (http://en.wikipedia.org/wiki/XHTML_Mobile_Profile). Given the wide adoption of smart phones, we can safely focus on developing for HTML/XHTML primarily. For older phones, we can provide a reduced or limited experience by using progressive enhancements/graceful degrading techniques.

==== Content is the king
The easiest way and arguably more maintainable way to develop for mobile is to have different content – layouts, styles, images etc for the regular website and mobile website. Because all smart phones are not created equal, multiple versions of mobile content may be required.


=== Asp.Net MVC4 Mobile features

==== Asp.Net MVC4 Default Template
 - Screen shot of default site
 - Example code
 
===== Adaptive rendering capabilities
 - Same site, rendered in mobile
 - Code blocks
 - Screen shot
 
===== Feature detection, media queries
 - Detecting device features based on CSS3 media queries
 - Fallback for non CSS3 support
 - Mobile frameworks to rescue
 - Example frameworks
 
===== Configuring/Customizing views, layouts

=== Mobile Frameworks

==== Using jQuery Mobile